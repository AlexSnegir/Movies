// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Persistence;

#nullable disable

namespace Movies.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231009182414_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Movies.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Adult")
                        .HasColumnType("bit");

                    b.Property<int?>("BelongsToCollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("Budget")
                        .HasColumnType("int");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<string>("Homepage")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImdbId")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("char(2)");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Overview")
                        .HasColumnType("varchar(2000)");

                    b.Property<float?>("Popularity")
                        .HasColumnType("real");

                    b.Property<string>("PosterPath")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Revenue")
                        .HasColumnType("int");

                    b.Property<int?>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Tagline")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<float?>("VoteAverage")
                        .HasColumnType("real");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BelongsToCollectionId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.Entities.MovieCollection", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PosterPath")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("MovieCollections", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.Entities.MoviesGenres", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MoviesGenres", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.Entities.MoviesProductionCompanies", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCompanyId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ProductionCompanyId");

                    b.HasIndex("ProductionCompanyId");

                    b.ToTable("MoviesProductionCompanies", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.Entities.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LogoPath")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OriginCountry")
                        .HasColumnType("char(2)");

                    b.HasKey("Id");

                    b.ToTable("ProductionCompanies", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.Entities.ProductionCountry", b =>
                {
                    b.Property<string>("IsoCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("IsoCode");

                    b.ToTable("ProductionCountries", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.Entities.SpokenLanguage", b =>
                {
                    b.Property<string>("IsoCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsoCode");

                    b.ToTable("SpokenLanguagies", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.Entities.Watchlist", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<bool>("IsWatched")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Watchlists", (string)null);
                });

            modelBuilder.Entity("MoviesProductionCountries", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionCountryIsoCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MovieId", "ProductionCountryIsoCode");

                    b.HasIndex("ProductionCountryIsoCode");

                    b.ToTable("MoviesProductionCountries", (string)null);
                });

            modelBuilder.Entity("MoviesSpokenLanguages", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("SpokenLanguageIsoCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MovieId", "SpokenLanguageIsoCode");

                    b.HasIndex("SpokenLanguageIsoCode");

                    b.ToTable("MoviesSpokenLanguages", (string)null);
                });

            modelBuilder.Entity("Movies.Domain.Entities.Movie", b =>
                {
                    b.HasOne("Movies.Domain.Entities.MovieCollection", "BelongsToCollection")
                        .WithMany()
                        .HasForeignKey("BelongsToCollectionId");

                    b.Navigation("BelongsToCollection");
                });

            modelBuilder.Entity("Movies.Domain.Entities.MoviesGenres", b =>
                {
                    b.HasOne("Movies.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Movies.Domain.Entities.MoviesProductionCompanies", b =>
                {
                    b.HasOne("Movies.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entities.ProductionCompany", null)
                        .WithMany()
                        .HasForeignKey("ProductionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Movies.Domain.Entities.Watchlist", b =>
                {
                    b.HasOne("Movies.Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesProductionCountries", b =>
                {
                    b.HasOne("Movies.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entities.ProductionCountry", null)
                        .WithMany()
                        .HasForeignKey("ProductionCountryIsoCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviesSpokenLanguages", b =>
                {
                    b.HasOne("Movies.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies.Domain.Entities.SpokenLanguage", null)
                        .WithMany()
                        .HasForeignKey("SpokenLanguageIsoCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
